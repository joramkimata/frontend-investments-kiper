@using MudBlazor
@using System.Text.RegularExpressions
@using INKIPER.Dtos

<style>
    :root {
        --mud-palette-primary: #ccc;
    }
</style>

<MudDialog>
    <DialogContent>
        <MudForm Model="@ChangePasswordDto" @ref="_form" @bind-IsValid="@_success">
            <MudTextField @bind-Value="ChangePasswordDto.Password"
                          Immediate="true"
                          Variant="Variant.Outlined"
                          T="string" Label="Password"
                          HelperText="Choose a strong password"
                          @ref="pwField1"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Password is required!"
                          InputType="@PasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="ButtonTestclick"
                          AdornmentAriaLabel="Show Password"/>
            <MudTextField
                @bind-Value="ChangePasswordDto.ConfirmPassword"
                OnKeyDown="OnKeyDown"
                Immediate="true"
                Variant="Variant.Outlined"
                T="string"
                Label="Password"
                HelperText="Repeat the password"
                Validation="@(new Func<string, string>(PasswordMatch))"

                InputType="@PasswordInput"
                Adornment="Adornment.End"
                AdornmentIcon="@PasswordInputIcon"
                OnAdornmentClick="ButtonTestclick"
                AdornmentAriaLabel="Show Password"/>

            <MudButton OnClick="async () => await OnSubmit()" Disabled="@(!_success)" Style="background-color: #44bc59; height: 50px; margin-bottom: 20px; margin-top: 25px" Size="Size.Large" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save Change</MudButton>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    bool _success;
    bool _loading;
    MudForm _form = new();
    private ChangePasswordDto ChangePasswordDto = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    MudTextField<string> pwField1;


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    async void OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await OnSubmit();
        }
    }

    private async Task OnSubmit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
        }
    }

}