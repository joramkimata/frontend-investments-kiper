@using Microsoft.AspNetCore.Components
@using INKIPER.Dtos
@using INKIPER.Services
@using MudBlazor
@using INKIPER.Auth
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject MyAuthenticationStateProvider MyAuthenticationStateProvider
@inject ISnackbar Snackbar
@attribute [AllowAnonymous]
@inject MyUserService MyUserService

<MudForm Model="@_loginDto" @ref="_form" @bind-IsValid="@_success">
    <MudPaper Elevation="9" Class="login-box-inner-p">
        @if (_loading)
        {
            <MudProgressLinear Size="Size.Large" Style="background-color: #f6b26d" Indeterminate="true"/>
        }

        @if (loginError)
        {
            <MudAlert Severity="Severity.Error">Invalid Login</MudAlert>
        }


        <MudCardContent>
            <div class="logo-inner">
                <img src="img/logo.png"/>
                <h2>InvestmentsKiper - LOGIN</h2>
            </div>
            <MudTextField Immediate="true" @bind-Value="_loginDto.Email" Required="true" RequiredError="Username is required" Style="margin-bottom: 10px" T="string" Label="Username" Variant="Variant.Outlined"></MudTextField>

            <MudTextField OnKeyDown="OnKeyDown" Immediate="true" Required="true" RequiredError="Password is required" @bind-Value="_loginDto.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"/>

        </MudCardContent>
        <MudCardActions Style="margin-bottom: 20px">
            <MudButton OnClick="async () => await OnSubmit()" Disabled="@(!_success)" Style="background-color: #44bc59; height: 50px" FullWidth="true" Size="Size.Large" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
        </MudCardActions>
        
        <h2 style="text-align: center">&COPY; Powered By Izweb Technologies LTD </h2>
    </MudPaper>
</MudForm>

@code
{
    bool _success;
    bool _loading;
    MudForm _form = new();
    LoginDto _loginDto = new();
    bool loginError;

    async void OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await OnSubmit();
        }
    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task OnSubmit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            _loading = true;
            _success = false;
            var response = await MyAuthenticationStateProvider.LoginAsync(_loginDto.Email, _loginDto.Password);
            _loading = false;
            _success = true;
            if (response == null)
            {
                loginError = true;
            }
            else
            {
                NavigationManager.NavigateTo("/", true, true);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await MyUserService.FetchUserFromBrowserAsync();
        if (response != null)
        {
            NavigationManager.NavigateTo("/", true, true);
        }
    }

}