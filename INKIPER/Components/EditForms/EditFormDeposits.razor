@using MudBlazor
@using INKIPER.Dtos
@using INKIPER.GraphQL
@using INKIPER.GraphQL.Inputs.Deposits
@using INKIPER.GraphQL.QLs.Accounts
@using INKIPER.GraphQL.QLs.Deposit
@using INKIPER.GraphQL.Responses.Accounts
@using INKIPER.GraphQL.Responses.Deposits
@using INKIPER.GraphQL.Types
@inject GraphqlService GraphqlService
<style>
    :root {
        --mud-palette-primary: #44bc59;
    }
    
</style>

@if (ViewOnly)
{
    <MudDialog>
        <DialogContent>
            <Loader Loading="@_loading"/>
            <MudForm Model="@DepositDto" @ref="_form" @bind-IsValid="@_success">

                <p>Account Name:</p>
                <h3 style="border-bottom: 1px dashed #ccc; width: 100%; display: block">
                    @DepositDto.Account?.Name
                </h3>

                <div style="margin-top: 20px; margin-bottom: 10px">
                    <p>Amount Deposited:</p>
                    <h3 style="border-bottom: 1px dashed #ccc; width: 100%; display: block">
                        @{
                            string? money = "";
                            if (!string.IsNullOrEmpty(DepositDto.AmountDeposited))
                                money = float.Parse(DepositDto.AmountDeposited).ToString("N0");
                        }
                        @money
                    </h3>
                </div>


                <div style="margin-top: 15px">
                    <p> Deposited Date:</p>
                    <h3 style="border-bottom: 1px dashed #ccc; width: 100%; display: block">
                        @DepositDto.DepositedDate
                    </h3>
                </div>

                <div style="margin-top: 15px; margin-bottom: 26px">
                    <p> Description:</p>
                    <h3 style="border-bottom: 1px dashed #ccc; width: 100%; display: block">
                        @DepositDto.Description
                    </h3>
                </div>

            </MudForm>
        </DialogContent>
    </MudDialog>
}
else
{
    <MudDialog>
        <DialogContent>
            <Loader Loading="@_loading"/>
            <MudForm Model="@DepositDto" @ref="_form" @bind-IsValid="@_success">

                <MudAutocomplete
                    T="DepositDto.AccountRecord"
                    Label="Select Account"
                    @bind-Value="DepositDto.Account"
                    HelperText="Select Account Name"
                    Required="true"
                    Immediate="true"
                    RequiredError="Account Name is required!"
                    ToStringFunc="@(account => account.Name)"
                    SearchFunc="@SearchAccount"
                    Clearable
                    Variant="Variant.Outlined"/>

                <div style="margin-top: 20px; margin-bottom: 10px">
                    <MudTextField

                        Mask="@(new PatternMask("00000000000000"))"
                        Label="Amount"
                        T="string"
                        HelperText="@HelperText"
                        Immediate="true"
                        Required="true"
                        RequiredError="Amount is required!"
                        @bind-Value="DepositDto.AmountDeposited"
                        Variant="@Variant.Outlined"
                        @onblur="HandleOnKeyDown"
                        Clearable/>
                </div>

                <div style="margin-top: 20px; margin-bottom: 10px">
                    <MudTextField

                        Mask="@(new PatternMask("00000000000000"))"
                        Label="Current Account Balance"
                        T="string"
                        HelperText="@CBHelperText"
                        Immediate="true"
                        Required="true"
                        RequiredError="Balance is required!"
                        @bind-Value="DepositDto.CurrentAccountBalance"
                        Variant="@Variant.Outlined"
                        @onblur="CBHandleOnKeyDown"
                        Clearable/>
                </div>


                <div style="margin-top: 15px">
                    <MudDatePicker
                        Label="Deposited Date"
                        Required="true"
                        Clearable="true"
                        PickerVariant="PickerVariant.Dialog"
                        RequiredError="Deposited Date is required!"
                        @bind-Date="DepositDto.DepositedDate"
                        Variant="@Variant.Outlined"
                        Placeholder="Select Date"/>
                </div>

                <div style="margin-top: 15px">
                    <MudTextField @bind-Value="DepositDto.Description"
                                  Label=" Description"
                                  Variant="Variant.Outlined" Lines="5"
                                  HelperText="Enter  Description if any!">
                    </MudTextField>
                </div>


                <MudButton StartIcon="@Icons.TwoTone.Save" OnClick="async () => await OnSubmit()" Disabled="@(!_success)" Style="background-color: #44bc59; height: 50px; margin-bottom: 20px; margin-top: 25px" Size="Size.Large" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save Changes</MudButton>
            </MudForm>
        </DialogContent>
    </MudDialog>
}

@code {

    [Parameter]
    public Action OnSaveForm { get; set; }

    bool _success;
    bool _loading;
    MudForm _form = new();
    private DepositDto DepositDto = new();

    [Parameter]
    public DepositType? EditDepositDto { get; set; }

    [Parameter]
    public bool ViewOnly { get; set; }


    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private string HelperText = "Enter Amount";
    
    private string CBHelperText = "Enter Current Balance Amount";


    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    List<DepositDto.AccountRecord> Accounts = new List<DepositDto.AccountRecord>();

    protected override async Task OnInitializedAsync()
    {
        var response = await GraphqlService.ExecGraphQLQuery<GetAMyAllAccountsResponse>(AccountsGraphQLs.GET_ALL_ACCOUNTS);
        foreach (var account in response.Data.getAMyAllAccounts)
        {
            Accounts.Add(new DepositDto.AccountRecord(account.uuid, account.name));
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (EditDepositDto != null)
        {
            DepositDto = new DepositDto()
            {
                Description = EditDepositDto.description,
                Account = new DepositDto.AccountRecord(EditDepositDto.accounts.uuid, EditDepositDto.accounts.name),
                AmountDeposited = EditDepositDto.amountDeposited,
                DepositedDate = DateTime.Parse(EditDepositDto.depositedDate)
            };
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (EditDepositDto != null)
        {
            _success = true;
            StateHasChanged();
        }
    }


    private async Task OnSubmit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            _loading = true;
            _success = false;


            if (EditDepositDto != null)
            {
                var response = await GraphqlService.ExecGraphQLMutation<UpdateDepositsResponse>(DepositGraphQLs.UPDATE_DEPOSIT, new
                {
                    uuid = EditDepositDto.uuid,
                    input = new DepositsInput()
                    {
                        description = DepositDto.Description,
                        accountsUid = DepositDto.Account.Uuid,
                        amountDeposited = float.Parse(DepositDto.AmountDeposited),
                        depositedDate = DepositDto.DepositedDate.ToString(),
                        currentBalance = float.Parse(DepositDto.CurrentAccountBalance)
                    }
                });

                GraphqlService.Notify(response.updateDeposits, () => { MudDialog.Close(); });
            }
            else
            {
                var response = await GraphqlService.ExecGraphQLMutation<CreateDepositsResponse>(DepositGraphQLs.CREATE_DEPOSIT, new
                {
                    input = new DepositsInput()
                    {
                        description = DepositDto.Description,
                        accountsUid = DepositDto.Account.Uuid,
                        amountDeposited = float.Parse(DepositDto.AmountDeposited),
                        depositedDate = DepositDto.DepositedDate.ToString(),
                        currentBalance = float.Parse(DepositDto.CurrentAccountBalance)
                    }
                });

                GraphqlService.Notify(response.createDeposits, () => { MudDialog.Close(); });
            }


            _loading = false;

            OnSaveForm.Invoke();
        }
    }

    private async Task<IEnumerable<DepositDto.AccountRecord>> SearchAccount(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Accounts;

        IEnumerable<DepositDto.AccountRecord> records;

        if (EditDepositDto != null)
        {
            records = Accounts.Where(x => !x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }
        else
        {
            records = Accounts.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

    // DepositDto.AccountRecord[] accountRecords = records.ToArray();

        return records;
    }


    private void HandleOnKeyDown()
    {
        if (DepositDto?.AmountDeposited != null)
        {
            HelperText = float.Parse(DepositDto.AmountDeposited).ToString("N1");
        }
    }

    private void CBHandleOnKeyDown()
    {
        if (DepositDto?.CurrentAccountBalance != null)
        {
            CBHelperText = float.Parse(DepositDto.CurrentAccountBalance).ToString("N1");
        }
    }

}